.program picopet
 
; Waits for the GPIO16 pin to go HIGH and starts to count clock cycles.
; It uses X register decrementing its value from max value (2**32) set 
; on each rising edge to next rising edge when the current value is
; pushed to main routine and X register reset to max value.
; 
;
; Version:
; 25-May-2021  Marek Dorsic (.md)
;

.side_set 1

wait 1 gpio 16 side 0          ; wait for rising edge and turn off the LED (with "side 0")

.wrap_target
    set x, 0 side 1         ; set X to be 0 and turn on the LED because rising edge detected first time since program started
    mov x, !x side 1              ; set X to be 2^32
high:
    jmp x-- highd side 1        ; decremen X until falling edge
highd:
    jmp PIN high side 1     ; loop until pin HIGH
low:
    jmp PIN write side 0    ; if next rising edge (pin HIGH) goto write, but first time on this instruction means falling edge so turn off LED
    jmp x-- low side 0            ; else decrement and loop
write:
    mov x, !x side 1        ; negate X register to get the count, also rising edge detected so turn on the LED
    mov isr, x side 1      ; move X to output register
    push noblock side 1       ; push ISR value to main routine
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void picopet_program_init(PIO pio, uint sm, uint offset, uint pin, uint led_pin) {
   pio_gpio_init(pio, led_pin);
   pio_sm_set_consecutive_pindirs(pio, sm, led_pin, 1, true);
   pio_sm_config c = picopet_program_get_default_config(offset);
   sm_config_set_set_pins(&c, led_pin, 1);
   sm_config_set_sideset_pins(&c, led_pin);
   sm_config_set_sideset(&c, 1, false, false);
   sm_config_set_jmp_pin(&c, pin);
   pio_sm_init(pio, sm, offset, &c);
}
%}